[{"/Users/elicusic/Desktop/react_project/connect-four/src/reportWebVitals.js":"1","/Users/elicusic/Desktop/react_project/connect-four/src/App.js":"2","/Users/elicusic/Desktop/react_project/connect-four/src/index.js":"3","/Users/elicusic/Desktop/react_project/connect-four/src/components/NavBar.js":"4","/Users/elicusic/Desktop/react_project/connect-four/src/containers/Scores.js":"5","/Users/elicusic/Desktop/react_project/connect-four/src/containers/Game.js":"6","/Users/elicusic/Desktop/react_project/connect-four/src/containers/LandingPage.js":"7","/Users/elicusic/Desktop/react_project/connect-four/src/containers/GameBoard.js":"8","/Users/elicusic/Desktop/react_project/connect-four/src/components/Token.js":"9","/Users/elicusic/Desktop/react_project/connect-four/src/components/TokenButton.js":"10","/Users/elicusic/Desktop/react_project/connect-four/src/containers/CardPanel.js":"11","/Users/elicusic/Desktop/react_project/connect-four/src/components/Card.js":"12","/Users/elicusic/Desktop/react_project/connect-four/src/redux/store.js":"13","/Users/elicusic/Desktop/react_project/connect-four/src/actions/game.js":"14","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/index.js":"15","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/gameReducer.js":"16","/Users/elicusic/Desktop/react_project/connect-four/src/actions/index.js":"17","/Users/elicusic/Desktop/react_project/connect-four/src/containers/WholeGame.js":"18"},{"size":362,"mtime":1610029898509,"results":"19","hashOfConfig":"20"},{"size":955,"mtime":1610735719084,"results":"21","hashOfConfig":"20"},{"size":604,"mtime":1610670282768,"results":"22","hashOfConfig":"20"},{"size":359,"mtime":1610134038000,"results":"23","hashOfConfig":"20"},{"size":192,"mtime":1610130416698,"results":"24","hashOfConfig":"20"},{"size":1664,"mtime":1610733296514,"results":"25","hashOfConfig":"20"},{"size":208,"mtime":1610130484039,"results":"26","hashOfConfig":"20"},{"size":2010,"mtime":1610728402632,"results":"27","hashOfConfig":"20"},{"size":468,"mtime":1610668864831,"results":"28","hashOfConfig":"20"},{"size":254,"mtime":1610726785955,"results":"29","hashOfConfig":"20"},{"size":646,"mtime":1610409063684,"results":"30","hashOfConfig":"20"},{"size":163,"mtime":1610410855958,"results":"31","hashOfConfig":"20"},{"size":730,"mtime":1610664077521,"results":"32","hashOfConfig":"20"},{"size":383,"mtime":1610663148687,"results":"33","hashOfConfig":"20"},{"size":118,"mtime":1610724691833,"results":"34","hashOfConfig":"20"},{"size":287,"mtime":1610732804725,"results":"35","hashOfConfig":"20"},{"size":175,"mtime":1610731443866,"results":"36","hashOfConfig":"20"},{"size":5384,"mtime":1610722642030,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1mak7t2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"40"},"/Users/elicusic/Desktop/react_project/connect-four/src/reportWebVitals.js",[],["78","79"],"/Users/elicusic/Desktop/react_project/connect-four/src/App.js",["80"],"/Users/elicusic/Desktop/react_project/connect-four/src/index.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/NavBar.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/Scores.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/Game.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/LandingPage.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/GameBoard.js",["81","82","83"],"import React, { Component } from 'react'\nimport TokenButton from '../components/TokenButton'\nimport { changeSomething } from '../actions/index'\nimport { connect } from 'react-redux'\n\nclass GameBoard extends Component {\n\n    // handleClick = (index) => {\n    //     let column = this.props.tokens.map(row => row[index])\n    //     console.log(column)\n    //     let nextToken = column.find(token => token.props.color === \"whitesmoke\")\n    //     console.log(nextToken)\n    //     changeSomething()\n    // }\n\n    // createButtons = () => {\n    //     let buttons = []\n    //     for (let i = 0; i < 7; i++){\n    //         buttons.push(<TokenButton number={i + 1} handleClick={() => this.handleClick(i)} />)\n    //     }\n    //     return buttons.map(map => map)\n    // }\n\n    generateRow = (tokenArray) => {\n        let cells = tokenArray.map(token => <td className=\"cell\">{ token }</td>)\n        return cells.map(cell => cell)\n    }\n\n    render() {\n        return (\n            <div id=\"game-board\">\n                <table id=\"game-board-table\">\n                    <tbody>\n                        <tr className=\"row\">{ this.generateRow(this.props.tokens[5]) }</tr>\n                        <tr className=\"row\">{ this.generateRow(this.props.tokens[4]) }</tr>\n                        <tr className=\"row\">{ this.generateRow(this.props.tokens[3]) }</tr>\n                        <tr className=\"row\">{ this.generateRow(this.props.tokens[2]) }</tr>\n                        <tr className=\"row\">{ this.generateRow(this.props.tokens[1]) }</tr>\n                        <tr className=\"row\">{ this.generateRow(this.props.tokens[0]) }</tr>\n                        <tr id=\"button-row\">{ this.generateRow(this.props.buttons) }</tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}\n\n// const mapStateToProps = state => {\n//     return {\n//       state: state\n//     }\n// }\n  \n  \n// export default connect(mapStateToProps, { changeSomething })(GameBoard)\n  \n  \nexport default GameBoard","/Users/elicusic/Desktop/react_project/connect-four/src/components/Token.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/TokenButton.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/CardPanel.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/Card.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/redux/store.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/actions/game.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/index.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/gameReducer.js",["84"],"export default (state = {practice: \"Initial state\"}, action) => {\n    console.log(\"reducer\")\n    switch(action.type){\n        case \"SOMETHING\":\n            let newThing = action.payload\n            // debugger\n            return newThing\n        default:\n            return state\n    }\n}","/Users/elicusic/Desktop/react_project/connect-four/src/actions/index.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/WholeGame.js",["85","86"],"import React, { Component } from 'react'\n\nclass WholeGame extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      tokens: this.initializeTokens(),\n      turn: 1,\n      over: false\n    }\n  }\n\n  initializeTokens() {\n    let nestedArray = []\n    for (let i = 0; i < 6; i++) {\n      let rowArray = []\n      for (let j = 0; j < 7; j++) {\n        rowArray.push(<Token row={i} column={j} color={ \"whitesmoke\" } />)\n      }\n      nestedArray.push(rowArray)  \n    }\n    return nestedArray\n  }\n\n  generateRow = (tokenArray) => {\n    let cells = tokenArray.map(token => <td className=\"cell\">{ token }</td>)\n    return cells.map(cell => cell)\n  }\n\n  handleClick = (index) => {\n        let matrix = this.state.tokens\n        let column = matrix.map(row => row[index])\n        let rowNum = column.findIndex(token => token.props.color === \"whitesmoke\")\n        this.makeMove(matrix, rowNum, index)\n        this.checkWinner({row: rowNum, col: index})\n    }\n\n    createButtons = () => {\n        let buttons = []\n        for (let i = 0; i < 7; i++){\n            buttons.push(<TokenButton number={i + 1} handleClick={() => this.handleClick(i)} />)\n        }\n        return buttons.map(map => map)\n    }\n\n    makeMove = (matrix, rowNum, colNum) => {\n        if (this.state.turn % 2 === 0){\n            matrix[rowNum][colNum] = <Token row={rowNum} column={colNum} color={ \"blue\" } />  \n        } else {\n            matrix[rowNum][colNum] = <Token row={rowNum} column={colNum} color={ \"red\" } />\n        }\n        this.setState({\n            tokens: matrix,\n            turn: this.state.turn += 1,\n            over: false\n        })\n    }\n\n    currentToken(index){\n        return this.state.tokens[index. row][index.col]\n    }\n\n    fourInaRow(array, currentT){\n        for (let i = 0; i < 4; i++){\n            let slicedArr = array.slice(i, i + 5)\n            if (slicedArr.length >= 4 && slicedArr.every(token => token.props.color === currentT.props.color)){\n                console.log(\"game over\")\n            }\n        }\n    }\n\n    diagonalUpRight(index){\n        let arr = []\n        let row = index.row + 1\n        let col = index.col + 1\n        while (row < 6 && col < 7){\n            arr.push(this.state.tokens[row][col])\n            row += 1\n            col += 1\n        }\n        return arr\n    }\n\n    diagonalUpLeft(index){\n        let arr = []\n        let row = index.row + 1\n        let col = index.col - 1\n        while (row < 6 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row += 1\n            col -= 1\n        }\n        return arr.reverse()\n    }\n\n    diagonalDownLeft(index){\n        let arr = []\n        let row = index.row - 1\n        let col = index.col - 1\n        while (row > -1 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row -= 1\n            col -= 1\n        }\n        return arr.reverse()\n    }\n\n    diagonalDownRight(index){\n        let arr = []\n        let row = index.row - 1\n        let col = index.col + 1\n        while (row > -1 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row -= 1\n            col += 1\n        }\n        return arr\n    }\n\n    checkDiagonalRight(index){\n        let currentT = this.currentToken(index)\n        let arr = [...this.diagonalDownLeft(index), currentT, ...this.diagonalUpRight(index)]\n        this.fourInaRow(arr, currentT)\n    }\n\n    checkDiagonalLeft(index){\n        let currentT = this.currentToken(index)\n        let arr = [...this.diagonalUpLeft(index), currentT, ...this.diagonalDownRight(index)]\n        this.fourInaRow(arr, currentT)\n    }\n\n    checkVerticals(index){\n        let currentT = this.currentToken(index)\n        let column = this.state.tokens.map(row => row[index.col])\n        console.log(column)\n        this.fourInaRow(column, currentT)\n    }\n\n    checkHorizontals(index){\n        let currentT = this.currentToken(index)\n        let row = this.state.tokens[index.row]\n        this.fourInaRow(row, currentT)\n    }\n\n    checkWinner(index){\n        this.checkVerticals(index)\n        this.checkHorizontals(index)\n        this.checkDiagonalRight(index)\n        this.checkDiagonalLeft(index)\n    }\n\n  render() {\n    return (\n      <div>\n        <div id=\"game-board\">\n            <table id=\"game-board-table\">\n                <tbody>\n                    <tr className=\"row\">{ this.generateRow(this.state.tokens[5]) }</tr>\n                    <tr className=\"row\">{ this.generateRow(this.state.tokens[4]) }</tr>\n                    <tr className=\"row\">{ this.generateRow(this.state.tokens[3]) }</tr>\n                    <tr className=\"row\">{ this.generateRow(this.state.tokens[2]) }</tr>\n                    <tr className=\"row\">{ this.generateRow(this.state.tokens[1]) }</tr>\n                    <tr className=\"row\">{ this.generateRow(this.state.tokens[0]) }</tr>\n                    <tr id=\"button-row\">{ this.generateRow(this.createButtons()) }</tr>\n                </tbody>\n            </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Token = ({ row, column, color }) => {\n    return <div id={`${row}-${column}`} className=\"token\" style={{backgroundColor: `${color}`}}></div>  \n}\n\nconst TokenButton = ({ number, handleClick }) => {\n    return (\n      <div className=\"token-button\" onClick={handleClick}>\n        <div className=\"button-number\">{ number }</div>\n      </div>\n    )\n}\n\nexport default WholeGame",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":17},{"ruleId":"91","severity":1,"message":"95","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":3,"column":10,"nodeType":"93","messageId":"94","endLine":3,"endColumn":25},{"ruleId":"91","severity":1,"message":"97","line":4,"column":10,"nodeType":"93","messageId":"94","endLine":4,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":1,"column":1,"nodeType":"100","endLine":11,"endColumn":2},{"ruleId":"101","severity":1,"message":"102","line":55,"column":19,"nodeType":"103","endLine":55,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":61,"column":34,"nodeType":"103","messageId":"106","endLine":61,"endColumn":44,"fix":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'WholeGame' is defined but never used.","Identifier","unusedVar","'TokenButton' is defined but never used.","'changeSomething' is defined but never used.","'connect' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-whitespace-before-property","Unexpected whitespace before property row.","unexpectedWhitespace",{"range":"110","text":"111"},"no-global-assign","no-unsafe-negation",[1701,1703],"."]