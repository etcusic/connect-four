[{"/Users/elicusic/Desktop/react_project/connect-four/src/reportWebVitals.js":"1","/Users/elicusic/Desktop/react_project/connect-four/src/App.js":"2","/Users/elicusic/Desktop/react_project/connect-four/src/index.js":"3","/Users/elicusic/Desktop/react_project/connect-four/src/components/NavBar.js":"4","/Users/elicusic/Desktop/react_project/connect-four/src/containers/GameBoard.js":"5","/Users/elicusic/Desktop/react_project/connect-four/src/components/Token.js":"6","/Users/elicusic/Desktop/react_project/connect-four/src/components/TokenButton.js":"7","/Users/elicusic/Desktop/react_project/connect-four/src/containers/CardPanel.js":"8","/Users/elicusic/Desktop/react_project/connect-four/src/components/Card.js":"9","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/index.js":"10","/Users/elicusic/Desktop/react_project/connect-four/src/actions/index.js":"11","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/APIReducer.js":"12","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/apiReducer.js":"13","/Users/elicusic/Desktop/react_project/connect-four/src/routes/HomePage.js":"14","/Users/elicusic/Desktop/react_project/connect-four/src/routes/Scores.js":"15","/Users/elicusic/Desktop/react_project/connect-four/src/routes/WholeGame.js":"16","/Users/elicusic/Desktop/react_project/connect-four/src/components/MuppetLi.js":"17","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/sessionReducer.js":"18","/Users/elicusic/Desktop/react_project/connect-four/src/containers/SidePanel.js":"19","/Users/elicusic/Desktop/react_project/connect-four/src/components/ProfilePic.js":"20","/Users/elicusic/Desktop/react_project/connect-four/src/components/DeckSelector.js":"21","/Users/elicusic/Desktop/react_project/connect-four/src/components/GameSelector.js":"22","/Users/elicusic/Desktop/react_project/connect-four/src/components/HomeCard.js":"23","/Users/elicusic/Desktop/react_project/connect-four/src/containers/GameLogsTable.js":"24","/Users/elicusic/Desktop/react_project/connect-four/src/components/ConnectFourLogs.js":"25","/Users/elicusic/Desktop/react_project/connect-four/src/containers/LeftCards.js":"26","/Users/elicusic/Desktop/react_project/connect-four/src/routes/ConnectFour.js":"27","/Users/elicusic/Desktop/react_project/connect-four/src/game-components/Token.js":"28","/Users/elicusic/Desktop/react_project/connect-four/src/game-components/GameBoard.js":"29","/Users/elicusic/Desktop/react_project/connect-four/src/game-components/RightCard.js":"30","/Users/elicusic/Desktop/react_project/connect-four/src/game-components/LeftCard.js":"31","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/viewReducer.js":"32","/Users/elicusic/Desktop/react_project/connect-four/src/unused-components/LandingPage.js":"33","/Users/elicusic/Desktop/react_project/connect-four/src/unused-components/Beaker.js":"34","/Users/elicusic/Desktop/react_project/connect-four/src/unused-components/MuppetsList.js":"35","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/gameLogsReducer.js":"36","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/userReducer.js":"37","/Users/elicusic/Desktop/react_project/connect-four/src/reducers/decksReducer.js":"38","/Users/elicusic/Desktop/react_project/connect-four/src/containers/MainSection.js":"39","/Users/elicusic/Desktop/react_project/connect-four/src/routes/GamePage.js":"40"},{"size":362,"mtime":1610029898509,"results":"41","hashOfConfig":"42"},{"size":1120,"mtime":1611357503364,"results":"43","hashOfConfig":"42"},{"size":605,"mtime":1611015248834,"results":"44","hashOfConfig":"42"},{"size":400,"mtime":1611342874683,"results":"45","hashOfConfig":"42"},{"size":1143,"mtime":1610745284123,"results":"46","hashOfConfig":"42"},{"size":468,"mtime":1610668864000,"results":"47","hashOfConfig":"42"},{"size":254,"mtime":1610726785000,"results":"48","hashOfConfig":"42"},{"size":646,"mtime":1610409063684,"results":"49","hashOfConfig":"42"},{"size":175,"mtime":1610922778467,"results":"50","hashOfConfig":"42"},{"size":211,"mtime":1611351000411,"results":"51","hashOfConfig":"42"},{"size":845,"mtime":1611351449832,"results":"52","hashOfConfig":"42"},{"size":280,"mtime":1610816593642,"results":"53","hashOfConfig":"42"},{"size":730,"mtime":1611342480524,"results":"54","hashOfConfig":"42"},{"size":880,"mtime":1611351868653,"results":"55","hashOfConfig":"42"},{"size":602,"mtime":1611351933180,"results":"56","hashOfConfig":"42"},{"size":9578,"mtime":1611349039532,"results":"57","hashOfConfig":"42"},{"size":280,"mtime":1610845735597,"results":"58","hashOfConfig":"42"},{"size":271,"mtime":1610845626474,"results":"59","hashOfConfig":"42"},{"size":805,"mtime":1611351134893,"results":"60","hashOfConfig":"42"},{"size":243,"mtime":1610917958813,"results":"61","hashOfConfig":"42"},{"size":341,"mtime":1611349941620,"results":"62","hashOfConfig":"42"},{"size":321,"mtime":1610906381095,"results":"63","hashOfConfig":"42"},{"size":550,"mtime":1610902386549,"results":"64","hashOfConfig":"42"},{"size":451,"mtime":1610917041330,"results":"65","hashOfConfig":"42"},{"size":862,"mtime":1610917128606,"results":"66","hashOfConfig":"42"},{"size":461,"mtime":1610922754616,"results":"67","hashOfConfig":"42"},{"size":7341,"mtime":1611012266421,"results":"68","hashOfConfig":"42"},{"size":199,"mtime":1611004242664,"results":"69","hashOfConfig":"42"},{"size":1653,"mtime":1611009375648,"results":"70","hashOfConfig":"42"},{"size":261,"mtime":1611004253508,"results":"71","hashOfConfig":"42"},{"size":264,"mtime":1611004247751,"results":"72","hashOfConfig":"42"},{"size":388,"mtime":1611346085455,"results":"73","hashOfConfig":"42"},{"size":1344,"mtime":1611346125517,"results":"74","hashOfConfig":"42"},{"size":9192,"mtime":1611345959957,"results":"75","hashOfConfig":"42"},{"size":727,"mtime":1611346019166,"results":"76","hashOfConfig":"42"},{"size":267,"mtime":1611351484389,"results":"77","hashOfConfig":"42"},{"size":338,"mtime":1611348951160,"results":"78","hashOfConfig":"42"},{"size":243,"mtime":1611350154364,"results":"79","hashOfConfig":"42"},{"size":271,"mtime":1611350968797,"results":"80","hashOfConfig":"42"},{"size":588,"mtime":1611357727105,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1mak7t2",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"117","usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"143","usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/elicusic/Desktop/react_project/connect-four/src/reportWebVitals.js",[],["170","171"],"/Users/elicusic/Desktop/react_project/connect-four/src/App.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/index.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/NavBar.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/GameBoard.js",[],["172","173"],"/Users/elicusic/Desktop/react_project/connect-four/src/components/Token.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/TokenButton.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/CardPanel.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/Card.js",[],["174","175"],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/index.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/actions/index.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/APIReducer.js",["176"],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/apiReducer.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/routes/HomePage.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/routes/Scores.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/routes/WholeGame.js",["177","178"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCards } from '../actions/index'\n\nclass WholeGame extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      tokens: this.initializeTokens(),\n      cards: this.generateCards(),\n      leftCards: [],\n      rightCards: [],\n      turn: 1,\n      over: false,\n      header: \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchCards(1)\n    let shuffled = this.shuffle(this.props.apiInfo.cards)\n    this.setState({\n        tokens: this.state.tokens,\n        cards: shuffled,\n        leftCards: this.generateLeftCards(shuffled.slice(0,7)),\n        rightCards: this.generateRightCards(shuffled.slice(0,7)),\n        turn: this.state.turn,\n        over: false,\n        header: \"GAME READY!\"\n    })\n  }\n\n  initializeTokens() {\n    let nestedArray = []\n    for (let i = 0; i < 6; i++) {\n      let rowArray = []\n      for (let j = 0; j < 7; j++) {\n        rowArray.push(<Token row={i} column={j} color={ \"whitesmoke\" } />)\n      }\n      nestedArray.push(rowArray)  \n    }\n    return nestedArray\n  }\n\n  generateRow = (tokenArray) => {\n    let cells = tokenArray.map(token => <td className=\"cell\">{ token }</td>)\n    return cells.map(cell => cell)\n  }\n\n  createButtons = () => {\n    let buttons = []\n    for (let i = 0; i < 7; i++){\n        buttons.push(<TokenButton number={i + 1} />)\n    }\n    return buttons.map(map => map)\n  }\n\n  generateCards(){\n      let array = []\n      for (let i = 0; i < 7; i++) {\n        array.push({side_a: \"\", side_b: \"\"})\n      }\n      return array\n  }\n\n  shuffleAndDeal(arr){\n      let shuffled = this.shuffle(arr)\n      this.setState({\n        tokens: this.state.tokens,\n        cards: shuffled,\n        leftCards: this.generateLeftCards(shuffled.slice(0,7)),\n        rightCards: this.generateRightCards(shuffled.slice(0,7)),\n        turn: this.state.turn,\n        over: false,\n        header: \"YOUR TURN\"\n    })       \n  }\n\n  generateLeftCards(arr){\n    return arr.map((card, index) => <LeftCard info={card} number={index} />)\n  }\n\n  generateRightCards(arr){\n    let rightCards = arr.map((card, index) => <RightCard info={card} handleClick={() => this.handleClick(index)} />)\n    let shuffled = this.shuffle(rightCards)\n    return shuffled\n  }\n  \n  shuffle (arrayOfCards) {\n    return arrayOfCards.sort(() => Math.random() - 0.5)\n  }\n\n  handleClick = (index) => {\n        let matrix = this.state.tokens\n        let column = matrix.map(row => row[index])\n        let rowNum = column.findIndex(token => token.props.color === \"whitesmoke\")\n        this.makeMove(matrix, rowNum, index)\n        // this.checkWinner({row: rowNum, col: index})\n  }\n\n    tryAgain(){\n        console.log(this.state)\n        this.setState({\n            tokens: this.state.tokens,\n            turn: this.state.turn,\n            over: false,\n            header: \"INVALID MOVE, TRY AGAIN!!\"\n        })\n    }\n\n    notValid(col){\n        return this.state.tokens[5][col].props.color !== \"whitesmoke\"\n    }\n\n    executeMove(matrix){\n        this.setState({\n            tokens: matrix,\n            turn: this.state.turn += 1,\n            over: false,\n            header: this.state.header\n        })\n    }\n\n    makeMove = (matrix, rowNum, colNum) => {\n        if (this.notValid(colNum)){\n            console.log(\"not valid\")\n            this.tryAgain()\n        } else if (this.state.turn % 2 === 0){\n            matrix[rowNum][colNum] = <Token row={rowNum} column={colNum} color={ \"blue\" } />  \n            this.executeMove(matrix)\n            this.checkWinner({row: rowNum, col: colNum})\n        } else {\n            matrix[rowNum][colNum] = <Token row={rowNum} column={colNum} color={ \"red\" } />\n            this.executeMove(matrix)\n            this.checkWinner({row: rowNum, col: colNum})\n\n        }\n        \n    }\n\n    currentToken(index){\n        return this.state.tokens[index. row][index.col]\n    }\n\n    fourInaRow(array, currentT){\n        for (let i = 0; i < 4; i++){\n            let slicedArr = array.slice(i, (i + 4))\n            if (slicedArr.length === 4 && slicedArr.every(token => token.props.color === currentT.props.color)){\n                console.log(\"game over\") // need to implement a game over function\n                this.endGame()\n            }\n        }\n    }\n\n    diagonalUpRight(index){\n        let arr = []\n        let row = index.row + 1\n        let col = index.col + 1\n        while (row < 6 && col < 7){\n            arr.push(this.state.tokens[row][col])\n            row += 1\n            col += 1\n        }\n        return arr\n    }\n\n    diagonalUpLeft(index){\n        let arr = []\n        let row = index.row + 1\n        let col = index.col - 1\n        while (row < 6 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row += 1\n            col -= 1\n        }\n        return arr.reverse()\n    }\n\n    diagonalDownLeft(index){\n        let arr = []\n        let row = index.row - 1\n        let col = index.col - 1\n        while (row > -1 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row -= 1\n            col -= 1\n        }\n        return arr.reverse()\n    }\n\n    diagonalDownRight(index){\n        let arr = []\n        let row = index.row - 1\n        let col = index.col + 1\n        while (row > -1 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row -= 1\n            col += 1\n        }\n        return arr\n    }\n\n    checkDiagonalRight(index){\n        let currentT = this.currentToken(index)\n        let arr = [...this.diagonalDownLeft(index), currentT, ...this.diagonalUpRight(index)]\n        this.fourInaRow(arr, currentT)\n    }\n\n    checkDiagonalLeft(index){\n        let currentT = this.currentToken(index)\n        let arr = [...this.diagonalUpLeft(index), currentT, ...this.diagonalDownRight(index)].filter(token => token)\n        this.fourInaRow(arr, currentT)\n    }\n\n    checkVerticals(index){\n        let currentT = this.currentToken(index)\n        let column = this.state.tokens.map(row => row[index.col])\n        this.fourInaRow(column, currentT)\n    }\n\n    checkHorizontals(index){\n        let currentT = this.currentToken(index)\n        let row = this.state.tokens[index.row]\n        this.fourInaRow(row, currentT)\n    }\n\n    isGameOver(index){\n        console.log(\"is game over?\", this.state.over)\n        if (this.state.over === true){\n            console.log(\"game is over\")\n        } else {\n            console.log(\"execute next turn\")\n            let arr = this.state.cards\n            arr.splice(index.col, 1)\n            this.shuffleAndDeal(arr)\n        }\n    }\n\n    checkWinner(index){\n        this.checkVerticals(index)\n        this.checkHorizontals(index)\n        this.checkDiagonalRight(index)\n        this.checkDiagonalLeft(index)\n        this.isGameOver(index)\n    }\n\n    makeAPromise(myFunction){\n        return new Promise(() => myFunction)\n    }\n\n    endGame(){\n        document.getElementById('button-row').remove()  \n        document.querySelectorAll('.quiz-card').forEach(element => element.remove())\n        this.setState({\n            tokens: this.state.tokens,\n            cards: [],\n            leftCards: [],\n            rightCards: [],\n            turn: this.state.turn,\n            over: true,\n            header: \"GAME OVER\"\n        })\n        console.log(this.state)\n    }\n\n  render() {\n    return (\n      <div class=\"row\">\n        \n        <div class=\"col s2\">\n            { this.state.leftCards.map(card => card) }\n        </div>\n\n        <div class=\"col s8\">\n            <h2 class=\"center\">{this.state.header}</h2>\n            <div id=\"game-board\" class=\"col s12\">\n                <table id=\"game-board-table\" class=\"center\">\n                    <tbody>\n                        <tr className=\"token-row\">{ this.generateRow(this.state.tokens[5]) }</tr>\n                        <tr className=\"token-row\">{ this.generateRow(this.state.tokens[4]) }</tr>\n                        <tr className=\"token-row\">{ this.generateRow(this.state.tokens[3]) }</tr>\n                        <tr className=\"token-row\">{ this.generateRow(this.state.tokens[2]) }</tr>\n                        <tr className=\"token-row\">{ this.generateRow(this.state.tokens[1]) }</tr>\n                        <tr className=\"token-row\">{ this.generateRow(this.state.tokens[0]) }</tr>\n                        <tr id=\"button-row\">{ this.generateRow(this.createButtons()) }</tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n\n        <div class=\"col s2\">\n            { this.state.rightCards.map(card => card) }\n        </div>\n\n      </div>\n    )\n  }\n}\n\nconst Token = ({ row, column, color }) => {\n    return <div id={`${row}-${column}`} className=\"token\" style={{backgroundColor: `${color}`}}></div>  \n}\n\nconst TokenButton = ({ number }) => {\n    return (\n      <div className=\"token-button\">\n        <div className=\"button-number\">{ number }</div>\n      </div>\n    )\n}\n\nconst LeftCard = ({ info, number }) => {\n    return (\n      <div className=\"quiz-card\">\n        <div class=\"left number\">{ number + 1 }</div>\n        <div class=\"center\">{ info.side_a }</div>\n      </div>\n    )\n}\n\nconst RightCard = ({ info, handleClick }) => {\n    return (\n      <div className=\"quiz-card\" onClick={handleClick}>\n        <div class=\"center\">\n            { info.side_b }\n        </div>\n      </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n      apiInfo: state.apiInfo,\n      session: state.session,\n      game: state.game\n    }\n}\n  \nexport default connect(mapStateToProps, { fetchCards })(WholeGame)\n// export default WholeGame\n","/Users/elicusic/Desktop/react_project/connect-four/src/components/MuppetLi.js",[],["179","180"],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/sessionReducer.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/SidePanel.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/ProfilePic.js",["181"],"import React from 'react'\n\nconst ProfilePic = ({ image }) => {\n    return (\n      <div id=\"profile-pic\" class=\"center three-percent\">\n        <img class=\"circle responsive-img\" src={image}></img>\n      </div>\n    )\n}\n\nexport default ProfilePic","/Users/elicusic/Desktop/react_project/connect-four/src/components/DeckSelector.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/GameSelector.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/HomeCard.js",["182"],"import React from 'react'\n\nconst HomeCard = () => {\n    return (\n      <div id=\"home-card\">\n        <div class=\"card\">\n            <div class=\"card-image\">\n                <img src=\"https://images.immediate.co.uk/production/volatile/sites/3/2020/05/Muppets-Now-0c065ce.jpg?quality=90&crop=665px%2C98px%2C1247px%2C831px&resize=620%2C413\" />\n            </div>\n            <div class=\"card-content center-align dark-green\">\n                <div>THIS IS THE HOME PAGE</div>\n            </div>\n        </div>\n      </div>\n    )\n}\n\nexport default HomeCard","/Users/elicusic/Desktop/react_project/connect-four/src/containers/GameLogsTable.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/components/ConnectFourLogs.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/LeftCards.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/routes/ConnectFour.js",["183","184"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCards } from '../actions/index'\nimport GameBoard from '../game-components/GameBoard'\nimport Token from '../game-components/Token'\nimport LeftCard from '../game-components/LeftCard'\nimport RightCard from '../game-components/RightCard'\n\nclass ConnectFour extends Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            tokens: this.initializeTokens(),\n            cards: [],\n            leftCards: [],\n            rightCards: [],\n            turn: 1,\n            over: false,\n            header: \"\"\n        }\n    }\n    \n    componentDidMount() {\n        this.props.fetchCards(1)\n        let shuffled = this.shuffle(this.props.apiInfo.cards)\n        this.setState({\n            tokens: this.state.tokens,\n            cards: shuffled,\n            leftCards: this.generateLeftCards(shuffled.slice(0,7)),\n            rightCards: this.generateRightCards(shuffled.slice(0,7)),\n            turn: this.state.turn,\n            over: false,\n            header: \"GAME READY!\"\n        })\n    }\n\n    initializeTokens() {\n        let nestedArray = []\n        for (let i = 0; i < 6; i++) {\n            let rowArray = []\n            for (let j = 0; j < 7; j++) {\n            rowArray.push(<Token row={i} column={j} color={ \"whitesmoke\" } />)\n            }\n            nestedArray.push(rowArray)  \n        }\n        return nestedArray\n    }\n\n    shuffle (arrayOfCards) {\n        return arrayOfCards.sort(() => Math.random() - 0.5)\n    }\n\n    generateLeftCards(arr){\n        return arr.map((card, index) => <LeftCard info={card} number={index} />)\n    }\n\n    generateRightCards(arr){\n        let rightCards = arr.map((card, index) => <RightCard info={card} handleClick={() => this.handleClick(index)} />)\n        let shuffled = this.shuffle(rightCards)\n        return shuffled\n    }\n\n    tryAgain(){\n        console.log(this.state)\n        this.setState({\n            cards: this.state.cards,\n            leftCards: this.state.leftCards,\n            rightCards: this.state.rightCards,\n            tokens: this.state.tokens,\n            turn: this.state.turn,\n            over: false,\n            header: \"INVALID MOVE, TRY AGAIN!!\"\n        })\n    }\n\n    shuffleAndDeal(arr){\n        let shuffled = this.shuffle(arr)\n        this.setState({\n            tokens: this.state.tokens,\n            cards: shuffled,\n            leftCards: this.generateLeftCards(shuffled.slice(0,7)),\n            rightCards: this.generateRightCards(shuffled.slice(0,7)),\n            turn: this.state.turn,\n            over: false,\n            header: \"YOUR TURN\"\n        })       \n    }\n\n    makeMove = (matrix, rowNum, colNum) => {\n        matrix[rowNum][colNum] = <Token row={rowNum} column={colNum} color={ \"blue\" } />  \n        this.setState({\n            cards: this.state.cards,\n            leftCards: this.state.leftCards,\n            rightCards: this.state.rightCards,\n            tokens: matrix,\n            turn: this.state.turn += 1,\n            over: false,\n            header: this.state.header\n        })\n    }\n\n    handleClick = (index) => {\n        let matrix = this.state.tokens\n        let column = matrix.map(row => row[index])\n        let rowNum = column.findIndex(token => token.props.color === \"whitesmoke\")\n        if (rowNum === -1){\n            this.tryAgain()\n        } else {\n            this.makeMove(matrix, rowNum, index)\n            this.checkWinner({row: rowNum, col: index})\n            this.removeCardAndDeal({row: rowNum, col: index})\n        }\n    }\n\n    currentToken(index){\n        return this.state.tokens[index. row][index.col]\n    }\n\n    fourInaRow(array, currentT){\n        for (let i = 0; i < 4; i++){\n            let slicedArr = array.slice(i, (i + 4))\n            if (slicedArr.length === 4 && slicedArr.every(token => token.props.color === currentT.props.color)){\n                console.log(\"game over\") // need to implement a game over function\n                this.endGame()\n            }\n        }\n    }\n\n    diagonalUpRight(index){\n        let arr = []\n        let row = index.row + 1\n        let col = index.col + 1\n        while (row < 6 && col < 7){\n            arr.push(this.state.tokens[row][col])\n            row += 1\n            col += 1\n        }\n        return arr\n    }\n\n    diagonalUpLeft(index){\n        let arr = []\n        let row = index.row + 1\n        let col = index.col - 1\n        while (row < 6 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row += 1\n            col -= 1\n        }\n        return arr.reverse()\n    }\n\n    diagonalDownLeft(index){\n        let arr = []\n        let row = index.row - 1\n        let col = index.col - 1\n        while (row > -1 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row -= 1\n            col -= 1\n        }\n        return arr.reverse()\n    }\n\n    diagonalDownRight(index){\n        let arr = []\n        let row = index.row - 1\n        let col = index.col + 1\n        while (row > -1 && col > -1){\n            arr.push(this.state.tokens[row][col])\n            row -= 1\n            col += 1\n        }\n        return arr\n    }\n\n    checkDiagonalRight(index){\n        let currentT = this.currentToken(index)\n        let arr = [...this.diagonalDownLeft(index), currentT, ...this.diagonalUpRight(index)]\n        this.fourInaRow(arr, currentT)\n    }\n\n    checkDiagonalLeft(index){\n        let currentT = this.currentToken(index)\n        let arr = [...this.diagonalUpLeft(index), currentT, ...this.diagonalDownRight(index)].filter(token => token)\n        this.fourInaRow(arr, currentT)\n    }\n\n    checkVerticals(index){\n        let currentT = this.currentToken(index)\n        let column = this.state.tokens.map(row => row[index.col])\n        this.fourInaRow(column, currentT)\n    }\n\n    checkHorizontals(index){\n        let currentT = this.currentToken(index)\n        let row = this.state.tokens[index.row]\n        this.fourInaRow(row, currentT)\n    }\n\n    checkWinner(index){\n        this.checkVerticals(index)\n        this.checkHorizontals(index)\n        this.checkDiagonalRight(index)\n        this.checkDiagonalLeft(index)\n    }\n\n    removeCardAndDeal(index){\n        let arr = this.state.cards\n        arr.splice(index.col, 1)\n        this.shuffleAndDeal(arr)\n    }\n\n    endGame(){\n        // cannot get set state to work here and it is super frustrating\n        document.getElementById('button-row').remove()  \n        document.querySelectorAll('.quiz-card').forEach(element => element.remove())\n        document.getElementById('game-header').innerHTML = \"GAME OVER\"\n    }\n\n    render() {\n        return (\n            <div class=\"row\">\n            \n                <div class=\"col s2\">\n                    { this.state.leftCards.map(card => card) }\n                </div>\n\n                <div class=\"col s8\">\n                    <GameBoard tokens={ this.state.tokens } header={ this.state.header } />\n                </div>\n\n                <div class=\"col s2\">\n                    { this.state.rightCards.map(card => card) }\n                </div>\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      apiInfo: state.apiInfo,\n      session: state.session,\n      game: state.game\n    }\n}\n  \nexport default connect(mapStateToProps, { fetchCards })(ConnectFour)","/Users/elicusic/Desktop/react_project/connect-four/src/game-components/Token.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/game-components/GameBoard.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/game-components/RightCard.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/game-components/LeftCard.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/viewReducer.js",["185","186"],"/Users/elicusic/Desktop/react_project/connect-four/src/unused-components/LandingPage.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/unused-components/Beaker.js",["187"],"/Users/elicusic/Desktop/react_project/connect-four/src/unused-components/MuppetsList.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/gameLogsReducer.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/userReducer.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/reducers/decksReducer.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/containers/MainSection.js",[],"/Users/elicusic/Desktop/react_project/connect-four/src/routes/GamePage.js",["188","189"],{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"190","replacedBy":"194"},{"ruleId":"192","replacedBy":"195"},{"ruleId":"190","replacedBy":"196"},{"ruleId":"192","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":1,"column":7,"nodeType":"200","messageId":"201","endLine":1,"endColumn":17},{"ruleId":"202","severity":1,"message":"203","line":119,"column":19,"nodeType":"204","endLine":119,"endColumn":29},{"ruleId":"205","severity":1,"message":"206","line":143,"column":34,"nodeType":"204","messageId":"207","endLine":143,"endColumn":44,"fix":"208"},{"ruleId":"190","replacedBy":"209"},{"ruleId":"192","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":6,"column":9,"nodeType":"213","endLine":6,"endColumn":56},{"ruleId":"211","severity":1,"message":"212","line":8,"column":17,"nodeType":"213","endLine":8,"endColumn":184},{"ruleId":"202","severity":1,"message":"203","line":97,"column":19,"nodeType":"204","endLine":97,"endColumn":29},{"ruleId":"205","severity":1,"message":"206","line":117,"column":34,"nodeType":"204","messageId":"207","endLine":117,"endColumn":44,"fix":"214"},{"ruleId":"198","severity":1,"message":"215","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"216","line":4,"column":7,"nodeType":"200","messageId":"201","endLine":4,"endColumn":11},{"ruleId":"211","severity":1,"message":"212","line":11,"column":25,"nodeType":"213","endLine":11,"endColumn":8306},{"ruleId":"217","severity":2,"message":"218","line":8,"column":9,"nodeType":"200","messageId":"219","endLine":8,"endColumn":14},{"ruleId":"220","severity":2,"message":"221","line":9,"column":20,"nodeType":"222","endLine":9,"endColumn":32},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],["223"],["224"],["223"],["224"],"no-unused-vars","'apiReducer' is assigned a value but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-whitespace-before-property","Unexpected whitespace before property row.","unexpectedWhitespace",{"range":"225","text":"226"},["223"],["224"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"range":"227","text":"226"},"'Beaker' is defined but never used.","'page' is assigned a value but never used.","no-undef","'state' is not defined.","undef","react/jsx-no-undef","'DeckSelector' is not defined.","JSXIdentifier","no-global-assign","no-unsafe-negation",[3880,3882],".",[3630,3632]]